	
	
MyMsg_t* msg = NULL;
char* res;
char res2;
	

	
	
void Test_MyMsg()
{
	for (int i = 0; i < 10000000; i++) {
		MyMsg_CacheStringPiece_ISR(0);
		MyMsg_CacheStringPiece_ISR(0);
		MyMsg_CacheStringPiece_ISR(0x0A);
		MyMsg_CacheStringPiece_ISR(0x0D);
		MyMsg_CacheStringPiece_ISR(0x05);
		MyMsg_CacheStringPiece_ISR(0x00);
		MyMsg_CacheStringPiece_ISR(0x00);
		MyMsg_CacheStringPiece_ISR(0x00);
		MyMsg_CacheStringPiece_ISR(0x01);
		MyMsg_CacheStringPiece_ISR(0x01);
		MyMsg_CacheStringPiece_ISR(0x02);
		MyMsg_CacheStringPiece_ISR(0x03);
		MyMsg_CacheStringPiece_ISR(0x04);
		MyMsg_CacheStringPiece_ISR(0x05);
		MyMsg_CacheStringPiece_ISR(0x0A);
		MyMsg_CacheStringPiece_ISR(0x0D);
		MyMsg_CacheStringPiece_ISR(0);
		MyMsg_CacheStringPiece_ISR(0);
		MyMsg_CacheStringPiece_ISR(0);
		MyMsg_CacheStringPiece_ISR(0);
		MyMsg_CacheStringPiece_ISR(0);
		MyMsg_CacheStringPiece_ISR(0);
		MyMsg_CacheStringPiece_ISR(0);
		msg = MyMsg_ProcessCache();
		if (msg != NULL)
			res = (char*) msg->pData;
		else
			Error_Handler();

		res2 = *res;
		if (res2 != 1)
			Error_Handler();
		res++;
		res2 = *res;
		if (res2 != 2)
			Error_Handler();
		res++;
		res2 = *res;
		if (res2 != 3)
			Error_Handler();
		res++;
		res2 = *res;
		if (res2 != 4)
			Error_Handler();
		free(msg->pData);
		free(msg);
	}
}